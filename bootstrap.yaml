---
- name: "Setup users"
  hosts: all
  tags: [never, first-run]
  become: true
  gather_facts: false
  vars:
    ansible_user: "{{ default_user }}"
    ansible_password: "{{ default_password }}"
    new_users:
      - "{{ lookup('env', 'USER') }}"
      - ansible
    ssh_public_key_file: "{{ lookup('env', 'HOME') + '/.ssh/magpie_ed25519.pub' }}"

  tasks:
    - name: "Add regular/automation users"
      ansible.builtin.user:
        name: "{{ item }}"
        state: present
        shell: /bin/bash
      loop: "{{ new_users }}"

    - name: "Give passwordless sudo by copying files to /etc/sudoers.d/"
      ansible.builtin.template:
        src: templates/sudoers.d.j2
        dest: "/etc/sudoers.d/{{ item }}"
        validate: "visudo -cf %s"
      loop: "{{ new_users }}"

    - name: "Set authorized SSH key"
      ansible.posix.authorized_key:
        user: "{{ item }}"
        key: "{{ lookup('file', ssh_public_key_file) }}"
        state: present
        exclusive: true
      loop: "{{ new_users }}"

    - name: "Lock root user password"
      ansible.builtin.user:
        name: root
        state: present
        password_lock: true

- name: "Cleanup default user"
  hosts: raspberry_pi
  tags: [first-run]
  become: true
  gather_facts: false

  tasks:
    # killall returns a zero return code if at least one process has been killed
    # for  each listed  command,  or no commands were listed and at least one process
    # matched the -u and -Z search criteria.  killall returns non-zero otherwise.
    - name: "Kill all processes run by user pi"
      ansible.builtin.command: killall -u pi
      register: result
      changed_when: result.rc == 0
      failed_when: result.rc != 0 and result.stderr != "Cannot find user pi"

    - name: "Delete pi user"
      ansible.builtin.user:
        name: pi
        state: absent
        remove: true

- name: "Lock down SSH"
  hosts: all
  tags: [first-run]
  become: true
  gather_facts: false

  tasks:
    - name: "Configure OpenSSH daemon"
      ansible.builtin.lineinfile:
        dest: /etc/ssh/sshd_config
        regexp: "{{ item.re }}"
        line: "{{ item.v }}"
        state: present
        validate: "/usr/sbin/sshd -T -f %s"
      loop:
        - {re: "^PasswordAuthentication", v: "PasswordAuthentication no"}
        - {re: "^PermitRootLogin", v: "PermitRootLogin no"}
      notify: "Restart OpenSSH daemon"

  handlers:
    - name: "Restart OpenSSH daemon"
      ansible.builtin.systemd:
        name: sshd
        state: restarted

- name: "Upgrade system packages"
  hosts: all
  tags: [first-run]
  become: true
  gather_facts: false

  tasks:
    - name: "Update cache and upgrade packages"
      ansible.builtin.apt:
        update_cache: true
        upgrade: "yes"
      notify: "Reboot host"

  handlers:
    - name: "Reboot host"
      ansible.builtin.reboot:
